#!/usr/bin/env python
from PySide import QtGui, QtCore
 
# import sys
import ardrone_gui
import roslib;roslib.load_manifest('ardrone_tutorials')
import rospy

from sensor_msgs.msg import Image
from ardrone_autonomy.msg import Navdata

from threading import Lock

from drone_status import DroneStatus

# Constants
CONNECTION_CHECK_PERIOD = 250 #ms
GUI_UPDATE_PERIOD = 20 #ms
DETECT_RADIUS = 4
class ARDroneApp(QtGui.QMainWindow):
    StatusMessages= {
        DroneStatus.Emergency: 'Emergency',
        DroneStatus.Inited: 'Initialized',
        DroneStatus.Landed: 'Landed',
        DroneStatus.Hovering: 'Hovering',
        DroneStatus.Test: 'Test (?)',
        DroneStatus.TakingOff: 'Taking Off',
        DroneStatus.GotoHover: 'Going to Hover Mode',
        DroneStatus.Landing: 'Landing',
        DroneStatus.Looping: 'Looping (?)'
    }
    DisconnectedMessage = 'Disconnected'
    UnknownMessage = 'Unknown Status'


    def __init__(self, parent=None):
        super(ARDroneApp, self).__init__()
        self.setWindowTitle('Drone Video Feed')
        self.imageBox = QtGui.QLabel(self)
        self.setCentralWidget(self.imageBox)
        self.subNavdata = rospy.Subscriber('/ardrone/navdata', Navdata, self.ReceiveNavdata)
        self.subVideo = rospy.Subscriber('/ardrone/image_raw', Image, self.ReceiveImage)

        self.image = None
        self.imageLock = Lock()

        self.tags = []
        self.tagLock = Lock()

        self.statusMessage = ''

        self.CommunicationSinceTimer = False
        self.connected = False

        self.connectionTimer = QtCore.QTimer(self)
        self.connectionTimer.timeout.connect(self.ConnectionCallback)
        self.connectionTimer.start(CONNECTION_CHECK_PERIOD)

        self.redrawTimer = QtCore.QTimer(self)
        self. redrawTimer.timeout.connnect(self.RedrawCallback)
        self.redrawTimer.start(GUI_UPDATE_PERIOD)

    def ConnectionCallback(self):
        self.connected = self.CommunicationSinceTimer
        self.CommunicationSinceTimer = False
        def RedrawCallback(self):
	  if self.image is not None:
            # We have some issues with locking between the display thread and the ros messaging thread due to the size of the image, so we need to lock the resources
            self.imageLock.acquire()
            try:
                # Convert the ROS image into a QImage which we can display
                image = QtGui.QPixmap.fromImage(
                    QtGui.QImage(self.image.data, self.image.width, self.image.height, QtGui.QImage.Format_RGB888))
                if len(self.tags) > 0:
                    self.tagLock.acquire()
                    try:
                        painter = QtGui.QPainter()
                        painter.begin(image)
                        painter.setPen(QtGui.QColor(0, 255, 0))
                        painter.setBrush(QtGui.QColor(0, 255, 0))
                        for (x, y, d) in self.tags:
                            r = QtCore.QRectF((x * image.width()) / 1000 - DETECT_RADIUS,
                                              (y * image.height()) / 1000 - DETECT_RADIUS, DETECT_RADIUS * 2,
                                              DETECT_RADIUS * 2)
                            painter.drawEllipse(r)
                            painter.drawText((x * image.width()) / 1000 + DETECT_RADIUS,
                                             (y * image.height()) / 1000 - DETECT_RADIUS, str(d / 100)[0:4] + 'm')
                        painter.end()
                    finally:
                        self.tagLock.release()
            finally:
                self.imageLock.release()

            # We could  do more processing (eg OpenCV) here if we wanted to, but for now lets just display the window.
            self.resize(image.width(), image.height())
            self.imageBox.setPixmap(image)

        # Update the status bar to show the current drone status & battery level
        self.statusBar().showMessage(self.statusMessage if self.connected else self.DisconnectedMessage)

    def ReceiveImage(self, data):
        self.CommunicationSinceTimer = True
        self.imageLock.acquire()
        try:
            self.image = data
        finally:
            self.imageLock.release()

    def ReceiveNavdata(self, navdata):
        self.CommunicationSinceTimer = True
        msg = self.StatusMessages[navdata.state] if navdata.state in self.StatusMessages else self.UnknownMessage
        self.StatusMessages = '{} Battery: {}%'.format(msg, int(navdata.batteryPercent))

        self.tagLock.acquire()
        try:
            if navdata.tags_count > 0:
                self.tags = [(navdata.tags_xc[i], navdata.tags_yc[i], navdata.tagss_distance[i]) for i in range(0, navdata.tags_count)]
            else:
                self.tags = []
        finally:
            self.tagLock.release()


        #
        # self.setupUi(self)
        # self.toggle_AR_cam.clicked()


# def main():




if __name__ == '__main__':
    import sys

    rospy.init_node('ardrone_video_display')
    app = QtGui.QApplication(sys.argv)
    ardrone_app = ARDroneApp()
    ardrone_app.show()
    app.exec_()
    rospy.signal_shutdown('Great Flying')
    sys.exit(status)
